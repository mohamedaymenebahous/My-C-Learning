Reading from a pipe uses file descriptor fd[0]
Writing to a pipe uses file descriptor fd[1]

It's not possible to have a pipe that both sends data and receives data in the 
same process
=>Solution : create two pipes, one used for reading and one for writing, and 
each one of the pipes is monodirectional, either from parent to child, or 
from child to parent  

int execlp(const char *file, const char *arg, ...);

Says that execlp Ã¬s a variable argument function. It takes 2 const char *. 
The rest of the arguments, if any, are the additional arguments to hand over 
to program we want to run - also char * - all these are C strings (and the last 
argument must be a NULL pointer)

So, the file argument is the path name of an executable file to be executed. 
arg is the string we want to appear as argv[0] in the executable. By convention, 
argv[0] is just the file name of the executable, normally it's set to the same 
as file.

exec(l/p/v/e) => list, path, vector, environment
